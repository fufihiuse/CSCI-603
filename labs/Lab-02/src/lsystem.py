"""
CSCI-603 Lab 2: L-system drawing generator

A program that combines a string rewriting L-system and an interpreter
to generate 2D drawings using the 2D turtle graphics library.

author: Jackson Majewski
"""
import turtle

# green tones palette
# PALETTE = ['dark green', 'forest green', 'green', 'olive drab', 'dark khaki', 'olive', 'dark olive green',
#            'lawn green', 'chartreuse', 'green yellow', 'spring green', 'medium spring green',
#            'light green', 'pale green', 'sienna', 'peru', 'chocolate', 'sandy brown',
#            'dark khaki', 'olive', 'dark olive green', 'olive drab', 'yellow green',
#            'dark green', 'gold', 'goldenrod', 'orange', 'dark orange']

# more colorful palette
PALETTE = [
    'tomato', 'dark blue', 'violet', 'thistle', 'burlywood', 'indigo', 'violet red', 'orange', 'crimson', 'peru',
    'teal', 'coral', 'olive drab', 'maroon', 'orchid', 'sienna', 'turquoise', 'indian red',
    'tan', 'chocolate', 'green yellow'
]


def apply_l_system(rules: list, 
                   axiom: str, 
                   rewriting_steps: int, 
                   ) -> str:
    """
    A function used to calculate the result of an l-system
    :return: str
    """
    # Setup initial state for L-system
    current_system = axiom
    previous_system = axiom

    # Loop through for all rewriting_steps
    for i in range(rewriting_steps - 1):

        # Set to work on last system
        previous_system = current_system

        # See if you can use dictionary/hash map
        for char in previous_system:
            match char:
                case 'F':
                    print("meow")
                case 'G':
                    print("meow")

    return "Meow"


def main() -> None:
    """
    The main loop responsible for getting the input details from the user,
    printing in the standard output the resulting string generated by the L-system
    and drawing its graphical representation
    :return: None
    """

    #TODO:
    # 1. Prompt for Axiom
    # 2. Prompt for number of production rules (positive int)
    # 3. Prompt for production rules one at a time (format P = S, P is single symbol, S is string)
    # 4. Prompt for angle of rotation used for all Left / Right commands (int 0-360)
    # 5. Prompt for initial length of line segment used for forward (positive float)
    # 6. Prompt for intial turtle's heading (int 0-360 inclusive)
    # 7. Prompt for number of rewriting steps (pos. int)
    # 8. Apply L-system and print (REMEMBER AXIOM IS ALWAYS FIRST STEP)
    # 9. Interpret, draw, and and print turtle command
    # 10. Idle on main loop

    # Welcome text
    print("Welcome to the L-system drawing generator!")
    
    # Prompt for axiom and rules
    axiom = input("Enter axiom (initial string): ")
    rule_count = int(input("Enter the number of rules: "))

    # Get each rule
    rules = {}
    for i in range(rule_count):
        rules[i] = input("Enter rule #" + str(i) + ": ")

    # Prompt for turtle specific information
    rotation_angle = int(input("Enter angle of rotation: "))
    line_legth = float(input("Enter initial line segment's length: "))
    turtle.setheading(int(input("Enter initial heading: ")))
    rewriting_steps = int(input("Enter number of steps: "))

    
    if __name__ == '__main__':
        main()
