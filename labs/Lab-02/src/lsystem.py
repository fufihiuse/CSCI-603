"""
CSCI-603 Lab 2: L-system drawing generator

A program that combines a string rewriting L-system and an interpreter
to generate 2D drawings using the 2D turtle graphics library.

author: Jackson Majewski
"""

import turtle

# green tones palette
# PALETTE = ['dark green', 'forest green', 'green', 'olive drab', 'dark khaki', 'olive', 'dark olive green',
#            'lawn green', 'chartreuse', 'green yellow', 'spring green', 'medium spring green',
#            'light green', 'pale green', 'sienna', 'peru', 'chocolate', 'sandy brown',
#            'dark khaki', 'olive', 'dark olive green', 'olive drab', 'yellow green',
#            'dark green', 'gold', 'goldenrod', 'orange', 'dark orange']

# more colorful palette
PALETTE = [
    "tomato",
    "dark blue",
    "violet",
    "thistle",
    "burlywood",
    "indigo",
    "violet red",
    "orange",
    "crimson",
    "peru",
    "teal",
    "coral",
    "olive drab",
    "maroon",
    "orchid",
    "sienna",
    "turquoise",
    "indian red",
    "tan",
    "chocolate",
    "green yellow",
]


def draw_l_system(l_system: str, rotation_angle: int, line_length: float) -> None:
    # Loop through l_system and evaluate based on alphabet
    for char in l_system:
        match char:
            case "F" | "G":
                print("forward(" + str(line_length) + ")")
                turtle.forward(line_length)
            case "f":
                print("pen up")
                turtle.penup()

                print("forward(" + str(line_length) + ")")
                turtle.forward(line_length)
                print("pen down")
                turtle.pendown()
            case "+":
                print("left(" + str(rotation_angle) + ")")
                turtle.left(rotation_angle)
            case "-":
                print("right(" + str(rotation_angle) + ")")
                turtle.right(rotation_angle)


def parse_rules(raw_rules: list) -> list:
    """
    A function used to convert the strings of rules into an easily searchable
    nested list of strings, much like a rudimentary dictionary/hash map
    :param raw_rules: A list containing rules for an L-system in the form P=S,
    where P is a single symbol, and S is the string to replace it with
    """
    parsed_rules = []
    for i in range(len(raw_rules)):
        kvp = raw_rules[i].split("=")
        parsed_rules.append([kvp[0], kvp[1]])

    return parsed_rules


def apply_l_system(
    rules: list,
    axiom: str,
    rewriting_steps: int,
) -> str:
    """
    A function used to calculate the result of an l-system
    :param rules: A nested list of rules, as returned by parse_rules()
    :param axiom: The initial axiom/state of the l-system
    :param rewriting_steps: How many times to iterate on the l-system
    :return: str
    """
    # Setup initial state for L-system
    current_system = axiom
    previous_system = axiom

    # Loop through for all rewriting_steps
    for i in range(rewriting_steps - 1):
        # Set to work on last system
        previous_system = current_system
        current_system = ""

        # Loop character by character and compare each value to our rules
        for char in previous_system:
            for rule in rules:
                if rule[0] == char:
                    current_system += rule[1]
                    break
            # If it didn't find the rule, just append the character
            else:
                current_system += char

    return current_system


def main() -> None:
    """
    The main loop responsible for getting the input details from the user,
    printing in the standard output the resulting string generated by the L-system
    and drawing its graphical representation
    :return: None
    """

    # TODO:
    # 8. Apply L-system and print (REMEMBER AXIOM IS ALWAYS FIRST STEP)
    # 9. Interpret, draw, and and print turtle command
    # 10. Idle on main loop

    # Welcome text
    print("Welcome to the L-system drawing generator!")

    # Prompt for axiom and rules
    axiom = input("Enter axiom (initial string): ")
    rule_count = int(input("Enter the number of rules: "))

    # Get each rule
    raw_rules = []
    for i in range(rule_count):
        raw_rules.append(input("Enter rule #" + str(i) + ": "))

    # Prompt for turtle specific information
    rotation_angle = int(input("Enter angle of rotation: "))
    line_length = float(input("Enter initial line segment's length: "))
    turtle_heading = int(input("Enter initial heading: "))
    rewriting_steps = int(input("Enter number of steps: "))

    print("Generating the string...")

    # Parse rule strings into a nested list
    rules = parse_rules(raw_rules)

    # Apply L-system to the axiom
    l_system = apply_l_system(rules, axiom, rewriting_steps)
    print("Result:")
    print(l_system)

    # Draw L-System to screen with turtle
    print("Drawing...")
    turtle.heading = turtle_heading
    draw_l_system(l_system, rotation_angle, line_length)

    # Wait until user exits the program
    turtle.mainloop()


if __name__ == "__main__":
    main()
